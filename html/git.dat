
git init 
git remote add origin <link>
git remote -v  (verify remote)
git branch
git branch -M main (Rename Branch)
git push origin main


Configuring git
    git config --global user.name = "ABCD xyz"
    git config --global user.email = "abcd@xyz.com"
    git config --global --list

    #unset
    git config --global --unset-all user.name
git config --global --unset-all user.email

Clone & Status
    git clone <Link> 
    git Status

Status
    untracked
    modified
    staged
    unmodified

    # git status -s

Add & Commit
    git add file.html
    git commit -m "MSG"
    git commit -a -m "Skipped stageing area"
    git commit -A



git rm --cached abcd.html


Push on Remote
    git push origin main

Branches
    git branch
    git branch -M main (rename)
    git checkout branchName (navigate)
    git checkout -b <new Branch name>  (adding anew branch)
    git branch -d branchname (delete a branch)

Merging
    git diff branchname
    git merge

Pull
    git pull origin main

Undo Changes

** Staged Change **
git reset filename

git reset

** Commited Changes (For one commit) **
git reset HEAD~1

** Commited Changes for many changes **

git reset <commit hash>
git reset --hard <commit hash>




##Log
git Log
 git log -p -2





 #######
 ## SSH keypair setup for GitHub (or GitHub/GitLab/BitBucket, etc, etc)


### Create a repo.
Make sure there is at least one file in it (even just the README.md)


### Generate a SSH key pair (private/public):
```
ssh-keygen -t rsa -C "your_email@example.com"
```

or even better:
```
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
```

It also possible to use ed25519. There are pros and cons, but personally I've had some issues and that is the reason I've chosen to stick to 4096 rsa for now.

### Copy the contents of the public SSH key

macOS:
```
pbcopy < ~/.ssh/id_rsa.pub
```
GNU/Linux (requires the xclip package):
```
xclip -sel clip < ~/.ssh/id_rsa.pub
```
Windows Command Line:
```
type %userprofile%\.ssh\id_rsa.pub | clip
```
Git Bash on Windows / Windows PowerShell:
```
cat ~/.ssh/id_rsa.pub | clip
```

or ofcourse copy it via your favorite editor, cat, or whatever suits your needs :)


### Copy the public SSH key to GitHub
Copy the contents of the to your SSH keys to your GitHub account settings (https://github.com/settings/keys).


### Test the SSH key:
```
ssh -T git@github.com
```

Change directory into the local clone of your repository (if you're not already there) and run:
```
git remote set-url origin git@github.com:username/your-repository.git
```

Now try editing a file (try the README) and then do:
```
git add -A
git commit -am "Update README.md"
git push
```

Add the key to the ssh-agent
```
ssh-add ~/.ssh/id_rsa
```

You should not be asked for a username or password. If it works, your SSH key is correctly configured.